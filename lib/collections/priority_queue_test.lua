local PriorityQueue = require("priority_queue")

print("default(highest)")
local _h = PriorityQueue()
_h:push(string.byte("b"))
_h:push(string.byte("z"))
_h:push(string.byte("c"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("z"))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("c"))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("b"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
print()

print("lowest")
local _h = PriorityQueue({mode="lowest"})
_h:push(string.byte("b"))
_h:push(string.byte("z"))
_h:push(string.byte("c"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("b"))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("c"))
local v = _h:pop(); print(v, string.char(v))
assert(v == string.byte("z"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
print()

print("highest_table")
local _h = PriorityQueue({mode="highest_table"})
_h:push({v=string.byte("b"), p=2})
_h:push({v=string.byte("z"), p=1})
_h:push({v=string.byte("c"), p=3})
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("c"))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("b"))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("z"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
print()

print("lowest_table")
local _h = PriorityQueue({mode="lowest_table"})
_h:push({v=string.byte("b"), p=2})
_h:push({v=string.byte("z"), p=1})
_h:push({v=string.byte("c"), p=3})
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("z"))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("b"))
local v = _h:pop(); print(v.p, string.char(v.v))
assert(v.v == string.byte("c"))
print("size: " .. _h:size() .. ", empty: " .. tostring(_h:empty()))
print()

